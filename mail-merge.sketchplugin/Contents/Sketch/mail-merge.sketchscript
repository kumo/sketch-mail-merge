var UI = require('sketch/ui')

var replaceValues = function(string, values) {
  var newString = string;

  // ensure that the string has a tag in it
  var matches = newString.match(/{\d+}/g)
  if (matches == null) {
    return string
  }

  for (var i=0; i < values.length; i++) {
    var stringToken = "{"+(i+1)+"}";
    newString = newString.replace(stringToken, values[i]);
  }

  return newString;
}

// based on http://stackoverflow.com/questions/19053827/csv-separator-auto-detection-in-javascript
var guessDelimiters = function(text, possibleDelimiters) {
    var result = possibleDelimiters.filter(weedOut);

    // make sure that we have found a delimiter, otherwise use default
    if (result.length != 1) {
      return /[\t,]/
    } else {
      return result
    }

    function weedOut (delimiter) {
      var cache = -1;
      return text.split('\n').every(checkLength);

      function checkLength (line) {
        if (!line) {
          return true;
        }

        var length = line.split(delimiter).length;
        if (cache < 0) {
          cache = length;
        }
        return cache === length && length > 1;
      }
  }
}

var parseUserInput = function(string, delimiter) {
  var values = []
  var rows = string.split('\n')

  var separator;
  if ( delimiter ) {
    separator = delimiter;
  }
  else {
    separator = guessDelimiters( string, [",", ";", "\t"] )
  }

  for (var i=0; i < rows.length; i++) {
    var rowText = rows[i]

    if (rowText == "") {
      continue
    }
    var rowValues = rowText.split(separator)

    values.push(rowValues)
  }
  //log(values)

  return values
}

var createTextRequest = function(msg) {

  // scrollview
  var scrollview = [[NSScrollView alloc] initWithFrame:NSMakeRect(0,0,300,80)];
  contentSize = [scrollview contentSize];
  [scrollview setBorderType:NSNoBorder];
  [scrollview setHasVerticalScroller:1];
  [scrollview setHasHorizontalScroller:0];
  [scrollview setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];

  // text view

  var accessory = [[NSTextView alloc] initWithFrame:NSMakeRect(0,0,300,80)]

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:msg]
  [alert addButtonWithTitle:'OK']
  [alert addButtonWithTitle:'Cancel']

  // assemble
  [scrollview setDocumentView:accessory];
  [alert setAccessoryView:scrollview]


  var responseCode = [alert runModal]
  var text = [[accessory textStorage] string];

  return [responseCode, text]
}

var setupLayout = function(context) {
  var offsetX = 0;
  var offsetY = 0;

  switch (context.selection.count()) {
    case 1:
      offsetX = 20;
      break;
    case 2:
      var frameA = context.selection[0].frame();
      var frameB = context.selection[1].frame();

      var deltaX = Math.abs(frameA.x() - frameB.x());
      var deltaY = Math.abs(frameA.y() - frameB.y());

      offsetX = deltaX - frameA.width();
      offsetY = deltaY - frameA.height();

      break;
    default:
      offsetX = 0;
      break;
  }

  return [offsetX, offsetY]
}


var onRunDelimiter = function(context) {
  var dv = "\t";
  UI.getInputFromUser(
    "What delimiter?", {
      type: UI.INPUT_TYPE.selection,
      possibleValues: ['Tab', 'Comma', 'Semicolon']
    },
    (err, value) => {
      if (err) {
        // most likely the user canceled the input
        return
      }

      switch (value) {
        case "Tab":
          dv = "\t";
          break;
        case "Comma":
          dv = ",";
          break;
        case "Semicolon":
          dv = ";";
          break;
      }

      return onRun(context, dv)
    }
  );


}

var onRun = function(context, delimiter) {
  var doc = context.document

  var selectionCount = context.selection.count()
  if (selectionCount == 0) {
    doc.showMessage("Nothing selected.")
    return
  }

  //var text = [doc askForUserInput:"What is the data?" initialValue:""];

  var pasteBoard = NSPasteboard.generalPasteboard();
  var stringFromPasteBoard = [pasteBoard stringForType:NSPasteboardTypeString]

  var rows = parseUserInput(stringFromPasteBoard, delimiter)

  var template = context.selection[selectionCount - 1];
  var templateFrame = template.frame()

  var templateWidth = templateFrame.width()
  var templateHeight = templateFrame.height()

  var numRows = rows.length

  var offsetX = 0;
  var offsetY = 0;

  var offsets = setupLayout(context)
  offsetX = offsets[0]
  offsetY = offsets[1]

  for (var rowId=0; rowId < numRows; rowId++) {
    doc.showMessage("Progress: " + (rowId + 1)+"/"+numRows)

    var rowValues = rows[rowId];

    // position and potentially name the group
    var instance = template.duplicate();

    var instanceFrame = instance.frame()
    instanceFrame.setX(instanceFrame.x() + (templateWidth + offsetX) * (rowId + 1))
    if (selectionCount == 2) {
      instanceFrame.setY(instanceFrame.y() + (templateHeight + offsetY) * (rowId + 1))
    }

    // change the artboard/layer name
    var newName = replaceValues(instance.name(), rowValues);
    instance.setName(newName);

    var labels = instance.children();

    for (var labelId=0; labelId < labels.count(); labelId++) {
      var label = labels[labelId];

      // change the label name
      var newName = replaceValues(label.name(), rowValues);
      label.setName(newName);

      if (! [label isKindOfClass:[MSTextLayer class]]) {
        continue
      }

      // change the label text
      var existingText = label.stringValue()
      var newText = replaceValues(existingText, rowValues);

      if (newText != existingText) {
        label.setStringValue(newText)

        // ensure that the label is refreshed
        //label.objectDidChange();
        label.adjustFrameToFit();
      }
    }
  }
};
